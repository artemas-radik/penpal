{"ast":null,"code":"var _jsxFileName = \"/Users/khoinguyen/Programming/delilah-ai/delilah-frontend/src/components/FreeWrite/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"./style.css\";\nimport Request from \"../Request\";\nimport FreeWriteMenu from \"./FreewriteMenu\";\nimport PromptInput from \"./PromptInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FreeWrite = _ref => {\n  _s();\n  let {\n    freewriteThreads,\n    setFreewriteThreads,\n    selectedFreewriteThread,\n    socket\n  } = _ref;\n  const [text, setText] = useState(freewriteThreads.find(freewriteThread => freewriteThread.id === selectedFreewriteThread).text);\n  const [prompt, setPrompt] = useState(freewriteThreads.find(freewriteThread => freewriteThread.id === selectedFreewriteThread).prompt);\n  const [bounds, setBounds] = useState(null);\n  const [showMenu, setShowMenu] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [insertAt, setInsertAt] = useState(0);\n  const quillRef = useRef(null);\n  useEffect(() => {\n    if (socket === null) return;\n    socket.onmessage = e => {\n      const data = JSON.parse(e.data);\n      console.log(data);\n      const editor = quillRef.current.getEditor();\n      if (data[\"first_output\"]) {\n        const selection = editor.getSelection(true);\n        editor.deleteText(selection.index, selection.length);\n      }\n      if (data[\"output_text\"]) {\n        editor.insertText(insertAt, data.output_text);\n        setInsertAt(insertAt + data.output_text.length);\n      }\n      if (data[\"status\"] === \"DONE\") {\n        setIsGenerating(false);\n      }\n    };\n    return () => {\n      socket.onmessage = null;\n    };\n  }, [insertAt]);\n  useEffect(() => {\n    setText(freewriteThreads.find(freewriteThread => freewriteThread.id === selectedFreewriteThread).text);\n    setPrompt(freewriteThreads.find(freewriteThread => freewriteThread.id === selectedFreewriteThread).prompt);\n  }, [selectedFreewriteThread]);\n  useEffect(() => {\n    const parameters = {\n      data: {\n        text: text\n      },\n      method: \"POST\"\n    };\n    const updateTextRequest = new Request(\"freewritethreads/\" + selectedFreewriteThread + \"/settext/\", parameters);\n    setIsSaving(true);\n    updateTextRequest.then(res => {\n      const newFreewriteThreads = freewriteThreads.map(freewriteThread => {\n        if (freewriteThread.id === selectedFreewriteThread) {\n          freewriteThread.text = text;\n        }\n        return freewriteThread;\n      });\n      setFreewriteThreads(newFreewriteThreads);\n      setIsSaving(false);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [text]);\n\n  // set the background of the snow theme\n  const modules = {\n    toolbar: [[{\n      header: [1, 2, false]\n    }], [\"bold\", \"italic\", \"underline\", \"strike\"], [{\n      list: \"ordered\"\n    }, {\n      list: \"bullet\"\n    }]]\n  };\n  const handleChangeSelection = e => {\n    if (!e || e.length === 0 || e.length < 10) {\n      setShowMenu(false);\n      return;\n    }\n    const selectedText = window.getSelection().toString();\n    if (!selectedText) {\n      setShowMenu(false);\n      return;\n    }\n    const editor = quillRef.current.getEditor();\n    const selectionBounds = editor.getBounds(e.index, e.length);\n    setBounds(selectionBounds);\n    setShowMenu(true);\n  };\n  const handleContextMenu = (e, mode) => {\n    e.preventDefault();\n    setIsGenerating(true);\n    const editor = quillRef.current.getEditor();\n    const selection = editor.getSelection(true);\n    setInsertAt(selection.index);\n    socket.send(JSON.stringify({\n      input_text: window.getSelection().toString(),\n      mode: mode,\n      websocket_type: \"freewritesnippet\",\n      freewrite_thread_id: selectedFreewriteThread\n    }));\n  };\n  const updatePrompt = prompt => {\n    const parameters = {\n      method: \"POST\",\n      data: {\n        prompt: prompt\n      }\n    };\n    const promptRequest = new Request(\"freewritethreads/\" + selectedFreewriteThread + \"/setprompt/\", parameters);\n    promptRequest.then(res => {\n      const newFreewriteThreads = freewriteThreads.map(freewriteThread => {\n        if (freewriteThread.id === selectedFreewriteThread) {\n          freewriteThread.prompt = prompt;\n        }\n        return freewriteThread;\n      });\n      setFreewriteThreads(newFreewriteThreads);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-5/6 overflow-y-scroll overflow-x-hidden flex flex-col h-screen px-[10rem] py-[2rem] bg-[#F8F9FA]\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(PromptInput, {\n        prompt: prompt,\n        setPrompt: setPrompt,\n        updatePrompt: updatePrompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n        theme: \"snow\",\n        className: \"w-full h-full\",\n        value: text,\n        onChange: setText,\n        modules: modules,\n        onChangeSelection: e => handleChangeSelection(e),\n        ref: quillRef,\n        readOnly: isGenerating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FreeWriteMenu, {\n        bounds: bounds,\n        showMenu: showMenu,\n        handleContextMenu: handleContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 3\n  }, this);\n};\n_s(FreeWrite, \"lDNumKt9bsrHkxo+ZYwISEv0yUI=\");\n_c = FreeWrite;\nexport default FreeWrite;\nvar _c;\n$RefreshReg$(_c, \"FreeWrite\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactQuill","Request","FreeWriteMenu","PromptInput","FreeWrite","freewriteThreads","setFreewriteThreads","selectedFreewriteThread","socket","text","setText","find","freewriteThread","id","prompt","setPrompt","bounds","setBounds","showMenu","setShowMenu","isSaving","setIsSaving","isGenerating","setIsGenerating","insertAt","setInsertAt","quillRef","onmessage","e","data","JSON","parse","console","log","editor","current","getEditor","selection","getSelection","deleteText","index","length","insertText","output_text","parameters","method","updateTextRequest","then","res","newFreewriteThreads","map","catch","err","modules","toolbar","header","list","handleChangeSelection","selectedText","window","toString","selectionBounds","getBounds","handleContextMenu","mode","preventDefault","send","stringify","input_text","websocket_type","freewrite_thread_id","updatePrompt","promptRequest"],"sources":["/Users/khoinguyen/Programming/delilah-ai/delilah-frontend/src/components/FreeWrite/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport ReactQuill from \"react-quill\"\nimport \"react-quill/dist/quill.snow.css\"\nimport \"./style.css\"\nimport Request from \"../Request\"\nimport FreeWriteMenu from \"./FreewriteMenu\"\nimport PromptInput from \"./PromptInput\"\n\nconst FreeWrite = ({\n\tfreewriteThreads,\n\tsetFreewriteThreads,\n\tselectedFreewriteThread,\n\tsocket,\n}) => {\n\tconst [text, setText] = useState(\n\t\tfreewriteThreads.find(\n\t\t\t(freewriteThread) => freewriteThread.id === selectedFreewriteThread\n\t\t).text\n\t)\n\tconst [prompt, setPrompt] = useState(\n\t\tfreewriteThreads.find(\n\t\t\t(freewriteThread) => freewriteThread.id === selectedFreewriteThread\n\t\t).prompt\n\t)\n\tconst [bounds, setBounds] = useState(null)\n\tconst [showMenu, setShowMenu] = useState(false)\n\tconst [isSaving, setIsSaving] = useState(false)\n\tconst [isGenerating, setIsGenerating] = useState(false)\n\tconst [insertAt, setInsertAt] = useState(0)\n\tconst quillRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tif (socket === null) return\n\n\t\tsocket.onmessage = (e) => {\n\t\t\tconst data = JSON.parse(e.data)\n\t\t\tconsole.log(data)\n\t\t\tconst editor = quillRef.current.getEditor()\n\t\t\tif (data[\"first_output\"]) {\n\t\t\t\tconst selection = editor.getSelection(true)\n\t\t\t\teditor.deleteText(selection.index, selection.length)\n\t\t\t}\n\n\t\t\tif (data[\"output_text\"]) {\n\t\t\t\teditor.insertText(insertAt, data.output_text)\n\t\t\t\tsetInsertAt(insertAt + data.output_text.length)\n\t\t\t}\n\n\t\t\tif (data[\"status\"] === \"DONE\") {\n\t\t\t\tsetIsGenerating(false)\n\t\t\t}\n\t\t}\n\n\t\treturn () => {\n\t\t\tsocket.onmessage = null\n\t\t}\n\t}, [insertAt])\n\n\tuseEffect(() => {\n\t\tsetText(\n\t\t\tfreewriteThreads.find(\n\t\t\t\t(freewriteThread) => freewriteThread.id === selectedFreewriteThread\n\t\t\t).text\n\t\t)\n\t\tsetPrompt(\n\t\t\tfreewriteThreads.find(\n\t\t\t\t(freewriteThread) => freewriteThread.id === selectedFreewriteThread\n\t\t\t).prompt\n\t\t)\n\t}, [selectedFreewriteThread])\n\n\tuseEffect(() => {\n\t\tconst parameters = {\n\t\t\tdata: {\n\t\t\t\ttext: text,\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t}\n\t\tconst updateTextRequest = new Request(\n\t\t\t\"freewritethreads/\" + selectedFreewriteThread + \"/settext/\",\n\t\t\tparameters\n\t\t)\n\t\tsetIsSaving(true)\n\n\t\tupdateTextRequest\n\t\t\t.then((res) => {\n\t\t\t\tconst newFreewriteThreads = freewriteThreads.map((freewriteThread) => {\n\t\t\t\t\tif (freewriteThread.id === selectedFreewriteThread) {\n\t\t\t\t\t\tfreewriteThread.text = text\n\t\t\t\t\t}\n\t\t\t\t\treturn freewriteThread\n\t\t\t\t})\n\t\t\t\tsetFreewriteThreads(newFreewriteThreads)\n\t\t\t\tsetIsSaving(false)\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}, [text])\n\n\t// set the background of the snow theme\n\tconst modules = {\n\t\ttoolbar: [\n\t\t\t[{ header: [1, 2, false] }],\n\t\t\t[\"bold\", \"italic\", \"underline\", \"strike\"],\n\t\t\t[{ list: \"ordered\" }, { list: \"bullet\" }],\n\t\t],\n\t}\n\n\tconst handleChangeSelection = (e) => {\n\t\tif (!e || e.length === 0 || e.length < 10) {\n\t\t\tsetShowMenu(false)\n\t\t\treturn\n\t\t}\n\n\t\tconst selectedText = window.getSelection().toString()\n\t\tif (!selectedText) {\n\t\t\tsetShowMenu(false)\n\t\t\treturn\n\t\t}\n\n\t\tconst editor = quillRef.current.getEditor()\n\t\tconst selectionBounds = editor.getBounds(e.index, e.length)\n\t\tsetBounds(selectionBounds)\n\t\tsetShowMenu(true)\n\t}\n\n\tconst handleContextMenu = (e, mode) => {\n\t\te.preventDefault()\n\n\t\tsetIsGenerating(true)\n\n\t\tconst editor = quillRef.current.getEditor()\n\t\tconst selection = editor.getSelection(true)\n\t\tsetInsertAt(selection.index)\n\n\t\tsocket.send(\n\t\t\tJSON.stringify({\n\t\t\t\tinput_text: window.getSelection().toString(),\n\t\t\t\tmode: mode,\n\t\t\t\twebsocket_type: \"freewritesnippet\",\n\t\t\t\tfreewrite_thread_id: selectedFreewriteThread,\n\t\t\t})\n\t\t)\n\t}\n\n\tconst updatePrompt = (prompt) => {\n\t\tconst parameters = {\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\tprompt: prompt,\n\t\t\t},\n\t\t}\n\n\t\tconst promptRequest = new Request(\n\t\t\t\"freewritethreads/\" + selectedFreewriteThread + \"/setprompt/\",\n\t\t\tparameters\n\t\t)\n\n\t\tpromptRequest\n\t\t\t.then((res) => {\n\t\t\t\tconst newFreewriteThreads = freewriteThreads.map((freewriteThread) => {\n\t\t\t\t\tif (freewriteThread.id === selectedFreewriteThread) {\n\t\t\t\t\t\tfreewriteThread.prompt = prompt\n\t\t\t\t\t}\n\t\t\t\t\treturn freewriteThread\n\t\t\t\t})\n\t\t\t\tsetFreewriteThreads(newFreewriteThreads)\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}\n\n\treturn (\n\t\t<div className='w-5/6 overflow-y-scroll overflow-x-hidden flex flex-col h-screen px-[10rem] py-[2rem] bg-[#F8F9FA]'>\n\t\t\t<div className='relative'>\n\t\t\t\t{/* {isSaving && <p>Currently Saving...</p>} */}\n\n\t\t\t\t<PromptInput\n\t\t\t\t\tprompt={prompt}\n\t\t\t\t\tsetPrompt={setPrompt}\n\t\t\t\t\tupdatePrompt={updatePrompt}\n\t\t\t\t/>\n\n\t\t\t\t<ReactQuill\n\t\t\t\t\ttheme='snow'\n\t\t\t\t\tclassName='w-full h-full'\n\t\t\t\t\tvalue={text}\n\t\t\t\t\tonChange={setText}\n\t\t\t\t\tmodules={modules}\n\t\t\t\t\tonChangeSelection={(e) => handleChangeSelection(e)}\n\t\t\t\t\tref={quillRef}\n\t\t\t\t\treadOnly={isGenerating}\n\t\t\t\t/>\n\n\t\t\t\t<FreeWriteMenu\n\t\t\t\t\tbounds={bounds}\n\t\t\t\t\tshowMenu={showMenu}\n\t\t\t\t\thandleContextMenu={handleContextMenu}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default FreeWrite\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}